//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Walking"",
            ""id"": ""8ac4788c-1a7f-4e24-9f35-b7a989c4972d"",
            ""actions"": [
                {
                    ""name"": ""MovementInput"",
                    ""type"": ""Value"",
                    ""id"": ""d70f5ed9-06ec-42e5-95d3-4d2cfe14bf1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""0b17edfb-aa0a-45f0-b99c-a1183383e76a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Squid"",
                    ""type"": ""Button"",
                    ""id"": ""30b99f12-ff44-4430-aabf-338cbae64fce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direction"",
                    ""id"": ""6d471406-3ce7-488f-973b-d9f0f6430d5c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""713580e2-4e74-4140-95fc-58d067566105"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b05ace39-d786-4b29-ba99-bc8131bd6f90"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f4a58b6b-7882-42f0-8358-b97570af4b5d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""723be808-b108-4406-bba5-9316d47a9c30"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e4ca19ae-1cc0-4c00-b804-c062b17b1a12"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcc4eb24-49f3-4781-9d06-faca2fffa8ca"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Squid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Walking
        m_Walking = asset.FindActionMap("Walking", throwIfNotFound: true);
        m_Walking_MovementInput = m_Walking.FindAction("MovementInput", throwIfNotFound: true);
        m_Walking_Camera = m_Walking.FindAction("Camera", throwIfNotFound: true);
        m_Walking_Squid = m_Walking.FindAction("Squid", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Walking
    private readonly InputActionMap m_Walking;
    private IWalkingActions m_WalkingActionsCallbackInterface;
    private readonly InputAction m_Walking_MovementInput;
    private readonly InputAction m_Walking_Camera;
    private readonly InputAction m_Walking_Squid;
    public struct WalkingActions
    {
        private @PlayerControls m_Wrapper;
        public WalkingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementInput => m_Wrapper.m_Walking_MovementInput;
        public InputAction @Camera => m_Wrapper.m_Walking_Camera;
        public InputAction @Squid => m_Wrapper.m_Walking_Squid;
        public InputActionMap Get() { return m_Wrapper.m_Walking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WalkingActions set) { return set.Get(); }
        public void SetCallbacks(IWalkingActions instance)
        {
            if (m_Wrapper.m_WalkingActionsCallbackInterface != null)
            {
                @MovementInput.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovementInput;
                @MovementInput.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovementInput;
                @MovementInput.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovementInput;
                @Camera.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnCamera;
                @Squid.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnSquid;
                @Squid.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnSquid;
                @Squid.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnSquid;
            }
            m_Wrapper.m_WalkingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementInput.started += instance.OnMovementInput;
                @MovementInput.performed += instance.OnMovementInput;
                @MovementInput.canceled += instance.OnMovementInput;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @Squid.started += instance.OnSquid;
                @Squid.performed += instance.OnSquid;
                @Squid.canceled += instance.OnSquid;
            }
        }
    }
    public WalkingActions @Walking => new WalkingActions(this);
    public interface IWalkingActions
    {
        void OnMovementInput(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnSquid(InputAction.CallbackContext context);
    }
}
